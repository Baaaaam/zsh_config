"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=700
set noswapfile
" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

augroup resCur
  autocmd!
  autocmd BufReadPost * call setpos(".", getpos("'\""))
augroup END

" Force to use underline for spell check results
augroup SpellUnderline autocmd!  
    autocmd ColorScheme * 
          \ highlight SpellBad 
          \     cterm=Underline 
          \     ctermfg=NONE 
          \     ctermbg=NONE 
          \     term=Reverse 
          \     gui=Undercurl 
          \     guisp=Red 
    autocmd ColorScheme * 
          \ highlight SpellCap 
          \     cterm=Underline 
          \     ctermfg=NONE 
          \     ctermbg=NONE 
          \     term=Reverse 
          \     gui=Undercurl 
          \     guisp=Red 
    autocmd ColorScheme * 
          \ highlight SpellLocal 
          \     cterm=Underline 
          \     ctermfg=NONE 
          \     ctermbg=NONE 
          \     term=Reverse 
          \     gui=Undercurl 
          \     guisp=Red 
    autocmd ColorScheme * 
          \ highlight SpellRare 
          \     cterm=Underline 
          \     ctermfg=NONE 
          \     ctermbg=NONE 
          \     term=Reverse 
          \     gui=Undercurl 
          \     guisp=Red 
augroup END

colorscheme darkmate
syntax enable


" Commenting blocks of code.
 autocmd FileType c,cpp,java,scala let b:comment_leader = '// '
 autocmd FileType sh,ruby,python   let b:comment_leader = '# '
 autocmd FileType conf,fstab       let b:comment_leader = '# '
 autocmd FileType tex              let b:comment_leader = '% '
 autocmd FileType mail             let b:comment_leader = '> '
 autocmd FileType vim              let b:comment_leader = '" '
 noremap <silent> ,cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
 noremap <silent> ,cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Helping with typo :)
command W w
command Wq wq
command Q q

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

set autoindent
set smartindent

" Line number
set number
set ruler

set shiftwidth=4
set softtabstop=4
set tabstop=4


" Linebreak on 80 characters
set lbr
set tw=80

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines


set hlsearch
set incsearch

set backspace=indent,eol,start

autocmd FileType gnuplot set formatoptions=l

autocmd Filetype html,xml,xsl let g:closetag_html_style=1
autocmd Filetype html,xml,xsl source ~/.vim/scripts/closetag.vim



autocmd BufNewFile,BufEnter *.xsh :setlocal filetype=python
au FileType python setlocal formatprg=autopep8\ -
au FileType cython setlocal formatprg=autopep8\ -
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Over command plugin: visual search and replace
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>v :OverCommandLine<CR> %s/<C-r><C-w>/

function! VisualFindAndReplace()
  :OverCommandLine %s/
  :noh
endfunction
nnoremap <Leader>s :call VisualFindAndReplace()<CR>

function! VisualFindAndReplaceWithSelection() range
  :'<,'>OverCommandLine s/
  :noh
endfunction
xnoremap <Leader>s :call VisualFindAndReplaceWithSelection()<CR>

""" Auto-unfold all
set foldlevelstart=99
"set foldlevel=99
set foldmethod=indent

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Latex plugin: configureation
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:tex_flavor='latex'
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_CompileRule_pdf='pdflatex -interaction=nonstopmode $*'
let g:Tex_ViewRule_pdf = 'open'

" Should disable folding in here
let Tex_FoldedSections=""
let Tex_FoldedEnvironments=""
let Tex_FoldedMisc=""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => clang-format plugin: configureation
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -4,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++11"}

" map to <Leader>cf in C++ code
autocmd FileType c,cpp,cxx,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,cxx,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
" if you install vim-operator-user
autocmd FileType c,cpp,cxx,objc map <buffer><Leader>x <Plug>(operator-clang-format)
" Toggle auto formatting:
nmap <Leader>C :ClangFormatAutoToggle<CR>
autocmd FileType c,cpp,cxx,ojbc setlocal formatprg=clang-format\ -

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Statusline
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
"
"" Use 256 colours (Use this setting only if your terminal supports 256 colours)
set t_Co=256
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
set ttimeoutlen=10
let g:bufferline_echo = 0


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" tabswitch
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nnoremap  <silent>   <tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bnext<CR>
nnoremap  <silent> <s-tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bprevious<CR>


